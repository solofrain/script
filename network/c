#!/opt/anaconda3/envs/ame=py38/bin/python
'''
This script is used to connect to beamline computers. It uses
ssh forwarding when executed out side of beamline networks.
It assumes that the script is executed on computers outside 
of beamline networks, or on beamline computers that can 
reach intranet.bnl.gov, otherwise it may fail.

To add beamlines/computers, add entries in bl.yml file in the 
same directory.

This script requires Python 3.5+.
'''

import yaml
import os
import socket
import platform    # For getting the operating system name
import subprocess  # For executing a shell command


#=============================================
# Detect if a host is reachable
def ping(host):
    """
    Returns True if host (str) responds to a ping request.
    Remember that a host may not respond to a ping (ICMP) request even if the host name is valid.
    """

    # Option for the number of packets as a function of
    param = '-n' if platform.system().lower()=='windows' else '-c'

    # Building the command. Ex: "ping -c 1 google.com"
    command = ['ping', param, '1',  host]
    return subprocess.call(command) == 0


######################################################
## main()
os.system("clear")

#=============================================
# 1. Get beamline host information
prog = __file__
directory = os.path.dirname(os.path.abspath(prog))

with open(directory+"/bl.yml", 'r') as bl:
    try:
        beamline = yaml.safe_load(bl)
    except yaml.YAMLError as exc:
        print(exc)


#=============================================
# 2. Select beamline
while 1:
    print('Please select the beamline:')
    print

    for i in range(len(beamline)):
        div = ' ' if (i+1>9) else '  '
        string = '    ' + str(i+1) + '.' + div  + beamline[i]['name'] + (7-len(beamline[i]['name']))*' ' + '\t--  ' + beamline[i]['alias']
        print(string)    

    print

    bl_index = input()
    if bl_index.isdigit():
        bl_index = int(bl_index)
    else:
        print('Incorrect input!')
        continue

    print

    if (bl_index>0) and (bl_index<=len(beamline)):
        bl_index -= 1
        break
    else:
        print ('Incorrect input!')
        print

print (beamline[bl_index]['name'].rstrip(), ' (', beamline[bl_index]['alias'], ') selected.')
print

#=============================================
# 3. Select host
while 1:
    print('Please select the computer:')
    print('WARNING: not all computer names have been verified.')
    print

    for i in range(len(beamline[bl_index]['host'])):
        div = '. ' if (i+1>9) else '.  '
        string = '    ' + str(i+1) + div  + beamline[bl_index]['host'][i]['name'] + '\t--\t' + beamline[bl_index]['host'][i]['note']
        print(string)

    host_index = input()
    if host_index.isdigit():
        host_index = int(host_index)
    else:
        print('Incorrect input!')
        continue

    print

    if (host_index>0) and (host_index<=len(beamline[bl_index]['host'])):
        host_index -= 1
        break
    else:
        print('Incorrect input!')
        print

host = beamline[bl_index]['host'][host_index]['name']


#=============================================
# 4. Compose the command based on location:
#    . Off-site/On-site Wi-Fi
#    . Campus network
#    . BNL proxy
#    . NSLS-II proxy
#    . Beamline
cmd1 = "ssh -Y -t liji@ssh.bnl.gov "
cmd2 = "ssh -Y -t box64-4.nsls2.bnl.gov "
if "win" in beamline[bl_index]['host'][host_index]['os'].lower():
    cmd3 = "rdesktop -g 90% " + host
else:
    cmd3 = "ssh -Y " + host


host = socket.gethostname()
if not ping("intranet.bnl.gov"):
    # location = off-site or on-site wifi
    cmd = cmd1 + cmd2 + cmd3
else:
    if ("box64" in host or "ssh"in host):
        if ("nsls2" in host):
            # location = "nsls2-proxy"
            cmd = cmd3
        else:
            # location = "bnl-proxy"
            cmd = cmd2 + cmd3
    elif "xf" in host:
        # location = "beamline"
        cmd = cmd3
    else:
        # location = "campus"
        cmd = cmd2 + cmd3

os.system(cmd)



